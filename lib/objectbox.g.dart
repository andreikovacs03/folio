// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'services/extensions/models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5779438059364853228),
      name: 'Book',
      lastPropertyId: const IdUid(16, 7271485354315500598),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7223687085568733421),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5192459096821355931),
            name: 'extId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5849868966234400527),
            name: 'author',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5085135343961939909),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6828822639573428484),
            name: 'publisher',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1321928675957678205),
            name: 'year',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1391171833556549060),
            name: 'pages',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7927751527879121574),
            name: 'language',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5459323639359726095),
            name: 'size',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2248560395270830992),
            name: 'extension',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2229279629448494164),
            name: 'mirror_1',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1893716289953815630),
            name: 'mirror_2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 2608838860837017769),
            name: 'mirror_3',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 33648458249800469),
            name: 'mirror_4',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 5711739170695402997),
            name: 'mirror_5',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 7271485354315500598),
            name: 'edit',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 5779438059364853228),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Book: EntityDefinition<Book>(
        model: _entities[0],
        toOneRelations: (Book object) => [],
        toManyRelations: (Book object) => {},
        getId: (Book object) => object.id,
        setId: (Book object, int id) {
          object.id = id;
        },
        objectToFB: (Book object, fb.Builder fbb) {
          final extIdOffset =
              object.extId == null ? null : fbb.writeString(object.extId!);
          final authorOffset =
              object.author == null ? null : fbb.writeString(object.author!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final publisherOffset = object.publisher == null
              ? null
              : fbb.writeString(object.publisher!);
          final yearOffset =
              object.year == null ? null : fbb.writeString(object.year!);
          final pagesOffset =
              object.pages == null ? null : fbb.writeString(object.pages!);
          final languageOffset = object.language == null
              ? null
              : fbb.writeString(object.language!);
          final sizeOffset =
              object.size == null ? null : fbb.writeString(object.size!);
          final extensionOffset = object.extension == null
              ? null
              : fbb.writeString(object.extension!);
          final mirror_1Offset = object.mirror_1 == null
              ? null
              : fbb.writeString(object.mirror_1!);
          final mirror_2Offset = object.mirror_2 == null
              ? null
              : fbb.writeString(object.mirror_2!);
          final mirror_3Offset = object.mirror_3 == null
              ? null
              : fbb.writeString(object.mirror_3!);
          final mirror_4Offset = object.mirror_4 == null
              ? null
              : fbb.writeString(object.mirror_4!);
          final mirror_5Offset = object.mirror_5 == null
              ? null
              : fbb.writeString(object.mirror_5!);
          final editOffset =
              object.edit == null ? null : fbb.writeString(object.edit!);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, extIdOffset);
          fbb.addOffset(2, authorOffset);
          fbb.addOffset(3, titleOffset);
          fbb.addOffset(4, publisherOffset);
          fbb.addOffset(5, yearOffset);
          fbb.addOffset(6, pagesOffset);
          fbb.addOffset(7, languageOffset);
          fbb.addOffset(8, sizeOffset);
          fbb.addOffset(9, extensionOffset);
          fbb.addOffset(10, mirror_1Offset);
          fbb.addOffset(11, mirror_2Offset);
          fbb.addOffset(12, mirror_3Offset);
          fbb.addOffset(13, mirror_4Offset);
          fbb.addOffset(14, mirror_5Offset);
          fbb.addOffset(15, editOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Book(
              extId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              author: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              pages: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              publisher: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              size: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 20),
              year: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              extension:
                  const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22),
              language: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 18),
              mirror_1: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 24),
              mirror_2: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 26),
              mirror_3: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 28),
              mirror_4: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30),
              mirror_5: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 32),
              edit: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 34))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Book] entity fields to define ObjectBox queries.
class Book_ {
  /// see [Book.id]
  static final id = QueryIntegerProperty<Book>(_entities[0].properties[0]);

  /// see [Book.extId]
  static final extId = QueryStringProperty<Book>(_entities[0].properties[1]);

  /// see [Book.author]
  static final author = QueryStringProperty<Book>(_entities[0].properties[2]);

  /// see [Book.title]
  static final title = QueryStringProperty<Book>(_entities[0].properties[3]);

  /// see [Book.publisher]
  static final publisher =
      QueryStringProperty<Book>(_entities[0].properties[4]);

  /// see [Book.year]
  static final year = QueryStringProperty<Book>(_entities[0].properties[5]);

  /// see [Book.pages]
  static final pages = QueryStringProperty<Book>(_entities[0].properties[6]);

  /// see [Book.language]
  static final language = QueryStringProperty<Book>(_entities[0].properties[7]);

  /// see [Book.size]
  static final size = QueryStringProperty<Book>(_entities[0].properties[8]);

  /// see [Book.extension]
  static final extension =
      QueryStringProperty<Book>(_entities[0].properties[9]);

  /// see [Book.mirror_1]
  static final mirror_1 =
      QueryStringProperty<Book>(_entities[0].properties[10]);

  /// see [Book.mirror_2]
  static final mirror_2 =
      QueryStringProperty<Book>(_entities[0].properties[11]);

  /// see [Book.mirror_3]
  static final mirror_3 =
      QueryStringProperty<Book>(_entities[0].properties[12]);

  /// see [Book.mirror_4]
  static final mirror_4 =
      QueryStringProperty<Book>(_entities[0].properties[13]);

  /// see [Book.mirror_5]
  static final mirror_5 =
      QueryStringProperty<Book>(_entities[0].properties[14]);

  /// see [Book.edit]
  static final edit = QueryStringProperty<Book>(_entities[0].properties[15]);
}
